import { QRCanvasLayerValue, QRCanvasDrawTextOptions } from '../types';
declare const helpers: {
    createCanvas: () => any;
    isCanvas: (el: any) => boolean;
    isDrawable: (el: any) => boolean;
    getCanvas: typeof getCanvas;
    cacheCanvas: typeof cacheCanvas;
    drawCanvas: typeof drawCanvas;
    drawText: typeof drawText;
};
export default helpers;
interface GetCanvasOptions {
    width?: number;
    height?: number;
    canvas?: any;
}
/**
 * @desc Create a new canvas.
 * @param {Int} width Width of the canvas.
 * @param {Int} height Height of the canvas.
 * @return {Canvas}
 */
declare function getCanvas({ width, height, canvas }?: GetCanvasOptions): any;
declare function cacheCanvas(...args: any[]): void;
interface DrawCanvasOptions {
    cellSize?: number;
    context?: any;
    clear?: boolean;
}
/**
 * @desc Draw to the canvas with given image or colors.
 * @param {Canvas} canvas The canvas to initialize.
 * @param {Image | String | Array} data
 * @param {Object} options
 *    cellSize: {Int}
 *    clear: {Boolean}
 */
declare function drawCanvas(canvas: any, data: QRCanvasLayerValue, options?: DrawCanvasOptions): any;
declare function drawText(text: any, options?: QRCanvasDrawTextOptions): any;
